<?php

// Entrypoint for redirecting
define('COMMERCE_DIBS_FLEXWIN_D2_FLEXWIN_ENTRYPOINT_URL', 
        'https://payment.architrade.com/paymentweb/start.action');
// DIBS module version
define('DIBS_SYSMOD', 'drc_fw_3.0.0');

// Defie if we need to send this param
define('SEND_PARAM',1);

// Check if this param is checked in module settings
define('PARAM_IS_CHECKED', 'yes');


/**
 * Implements hook_commerce_payment_method_info().
 *
 * This hook will define the Dibsflexwin payment method
 */
function commerce_dibs_flexwin_commerce_payment_method_info() {
    $payment_methods = array();

    $payment_methods['dibs_flexwin'] = array(
        'base' => 'commerce_dibs_flexwin',
        'title' => t('DIBS FlexWin | Secure Payment Services'),
        'short_title' => t('DIBS FlexWin'),
        'display_title' => t('DIBS FlexWin'),
        'description' => t('Integrates DIBS Payment provider.'),
        'terminal' => FALSE,
        'offsite' => TRUE,
        'offsite_autoredirect' => TRUE,
    );

    return $payment_methods;
}

/**
 * Implements hook_menu().
 */
function commerce_dibs_flexwin_menu() {
    $items = array();

    $items['commerce/dibs_flexwin/success'] = array(
        'title' => 'Order complete',
        'page callback' => 'commerce_dibs_flexwin_success',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'commerce_dibs_flexwin.pages.inc',
    );
 
    $items['commerce/dibs_flexwin/callback'] = array(
        'title' => 'Order complete',
        'page callback' => 'commerce_dibs_flexwin_callback',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'commerce_dibs_flexwin.pages.inc',
    );
    
    return $items;
}

function commerce_dibs_flexwin_settings_form($settings = NULL) {
    $form = array();

    $settings = (array)$settings + array(
        'dibs_flexwin_method_title' => "DIBS FlexWin",
        'dibs_flexwin_mid'          => "",
	'dibs_flexwin_partnerid'    => "",
        'dibs_flexwin_testmode'     => 1,
        'dibs_flexwin_decorator'    => 'default',
        'dibs_flexwin_fee'          => 0,
        'dibs_flexwin_capturenow'   => 0,
        'dibs_flexwin_voucher'      => 0,
        'dibs_flexwin_uniq'         => 0,
        'dibs_flexwin_paytype'      => "",
        'dibs_flexwin_lang'         => "da",
        'dibs_flexwin_account'      => "",
        'dibs_flexwin_distr'        => "notset",
    );

    $form['dibs_flexwin_method_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#description' => t('Payment method name displayed for customers. Ex: Dibs Flex Win'),
        '#default_value' => $settings['dibs_flexwin_method_title'],
    );

    $form['dibs_flexwin_mid'] = array(
        '#type' => 'textfield',
        '#title' => t('DIBS Merchantid'),
        '#description' => t('Your DIBS merchant account number.'),
        '#default_value' => $settings['dibs_flexwin_mid'],
        '#size' => 16
    );
    
   $form['dibs_flexwin_partnerid'] = array(
        '#type' => 'textfield',
        '#title' => t('DIBS Partner Id'),
        '#description' => t('Partner Id.'),
        '#default_value' => $settings['dibs_flexwin_partnerid'],
        '#size' => 16
    );

    $form['dibs_flexwin_k1'] = array(
        '#type' => 'textfield',
        '#title' => t('MD5 k1'),
        '#description' => t('MD5 keys'),
        '#default_value' => $settings['dibs_flexwin_k1']
    );

   $form['dibs_flexwin_k2'] = array(
        '#type' => 'textfield',
        '#title' => t('MD5 k2'),
        '#description' => t('Secret key'),
        '#default_value' => $settings['dibs_flexwin_k2']
    );
   
    $form['dibs_flexwin_fee'] = array(
        '#type' => 'checkbox',
        '#title' => t('Calcfee'),
        '#return_value' => 'yes',
        '#description' => t('Customer pays fee.'),
        '#default_value' => $settings['dibs_flexwin_fee'],
    );

    $form['dibs_flexwin_testmode'] = array(
        '#type' => 'checkbox',
        '#title' => t('Testmode'),
        '#return_value' => 'yes',
        '#description' => t('Test mode.'),
        '#default_value' => $settings['dibs_flexwin_testmode'],
    );

    $form['dibs_flexwin_capturenow'] = array(
        '#type' => 'checkbox',
        '#title' => t('Capture now'),
        '#description' => t('Function to automatically capture the transaction upon a successful authorization.'),
        '#return_value' => 'yes',
        '#default_value' => $settings['dibs_flexwin_capturenow']
    );

    $form['dibs_flexwin_voucher'] = array(
        '#type' => 'checkbox',
        '#title' => t('Voucher'),
        '#return_value' => 'yes',
        '#description' => t('Allow to customers use voucher'),
        '#default_value' => $settings['dibs_flexwin_voucher']
    );

    $form['dibs_flexwin_uniq'] = array(
        '#type' => 'checkbox',
        '#title' => t('Unique order ID'),
        '#description' => t('Check if order ID is unique'),
        '#return_value' => 'yes',
        '#default_value' => $settings['dibs_flexwin_uniq']
    );

    $form['dibs_flexwin_paytype'] = array(
        '#type' => 'textfield',
        '#title' => t('Paytype'),
        '#default_value' => $settings['dibs_flexwin_paytype'],
        
    );

    $form['dibs_flexwin_lang'] = array(
        '#type' => 'select',
        '#title' => t('Language:'),
        '#description' => t('Adjust language for Payment Window.'),
        '#options' => array(
            'da' => t('Danish'),
            'en' => t('English'),
            'fi' => t('Finnish'),
            'nb' => t('Norwegian'),
            'sv' => t('Swedish'),
        ),
        '#default_value' => $settings['dibs_flexwin_lang']
    );
    
    $form['dibs_flexwin_decorator'] = array(
        '#type' => 'select',
        '#title' => t('Decorator:'),
        '#description' => t('Decorator.'),
        '#options' => array(
            'default' => t('Default'),
            'basal' => t('Basal'),
            'rich' => t('Rich'),
            'responsive' => t('Responsive'),
           
        ),
        '#default_value' => $settings['dibs_flexwin_decorator']
    );
    
    $form['dibs_flexwin_distr'] = array(
        '#type' => 'select',
        '#title' => t('Distribution type:'),
        '#description' => t('Distribution type.'),
        '#options' => array(
            'notset' => t('Default'),
            'email' => t('Email'),
            'paper' => t('Paper'),
        ),
        '#default_value' => $settings['dibs_flexwin_distr']
    );
    
    $form['dibs_flexwin_account'] = array(
        '#type' => 'textfield',
        '#title' => t('Account'),
        '#description' => t('Account id used to visually separate transactions in admin.'),
        '#default_value' => $settings['dibs_flexwin_account'],
        '#size' => 16,
    );
    
    return $form;
}


/**
 * Payment method callback: redirect form
 *
 * returns form elements that should be submitted to the redirected
 * payment service
 */
function commerce_dibs_flexwin_redirect_form($form, &$form_state, $order, $payment_method) {
    if(empty($payment_method['settings']['dibs_flexwin_mid'])) {
        drupal_set_message(t('DIBS Payment Window is not configured for use. No Merchant Id has been specified.'), 'error');
        return array();
    }
    return commerce_dibs_flexwin_build_redirect_form($form, $form_state, $order, $payment_method['settings']);
}

/**
 * Helper function for the redirect_form callback.
 * Builds an Dibspw payment form from an order object.
 */
function commerce_dibs_flexwin_build_redirect_form($form, &$form_state, $order, $settings) {
    $form['#action'] = COMMERCE_DIBS_FLEXWIN_D2_FLEXWIN_ENTRYPOINT_URL;
    
    $common_params  = commerce_dibs_flexwin_collect_common_params($order, $settings);
    $invoice_params = commerce_dibs_flexwin_collect_invoice_params($order);
    $data = $common_params + $invoice_params;
    
    foreach($data as $sName => $sVal) $form[$sName] = array('#type' => 'hidden', '#value' => $sVal);
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Proceed with DIBS Payment'),
    );
    return $form;
}


/**
 * Collect common params necesary for card transactions
 */
function commerce_dibs_flexwin_collect_common_params($order, $settings) {
    $data = array();
    $order_id = $order->order_number;
    ($settings['dibs_flexwin_uniq'] == PARAM_IS_CHECKED) ? 
    $data['orderid'] = $order_id.time() : $data['orderid'] = $order_id;
    
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    $billing_address = entity_metadata_wrapper('commerce_customer_profile', $wrapper->commerce_customer_billing->value())->commerce_customer_address->value();
    
    $data['merchant']   = $settings['dibs_flexwin_mid'];
    $data['amount']     = commerce_dibs_flexwin_round($order->commerce_order_total[LANGUAGE_NONE][0]['amount'] / 100);
    $data['currency']   = $order->commerce_order_total[LANGUAGE_NONE][0]['currency_code'];
    $data['lang']   = $settings['dibs_flexwin_lang'];
   
    if($settings['dibs_flexwin_voucher'] === PARAM_IS_CHECKED) { 
         $data['voucher'] = PARAM_IS_CHECKED;
    }
    
    if($settings['dibs_flexwin_fee'] === PARAM_IS_CHECKED) { 
         $data['calcfee'] = SEND_PARAM;
    }
    
    if($settings['dibs_flexwin_testmode'] === PARAM_IS_CHECKED) {
        $data['test'] = SEND_PARAM;
    }
    
    if($settings['dibs_flexwin_account']) {
         $data['account'] = $settings['dibs_flexwin_account'];
    }
    
    if($settings['dibs_flexwin_paytype']) {
         $data['paytype'] = $settings['dibs_flexwin_paytype'];
    }
    
    if($settings['dibs_flexwin_partnerid']) {
          $data['partnerid'] = $settings['dibs_flexwin_partnerid'];
    }
    
    if($settings['dibs_flexwin_capturenow'] === PARAM_IS_CHECKED) {
          $data['capturenow'] = SEND_PARAM;
    }
    
    $data['distributionType'] = 'email';
    
    
     // Module version
     $data['s_sysmod'] = DIBS_SYSMOD;
    
    // Generate md5key, if k1, k2 keys set
    if( $settings['dibs_flexwin_k1'] && $settings['dibs_flexwin_k2']) {
        $k1 = $settings['dibs_flexwin_k1'];
        $k2 = $settings['dibs_flexwin_k2'];

        $parameter_string = '';
        $parameter_string .= 'merchant='  .  $data['merchant'];
        $parameter_string .= '&orderid='  .  $data['orderid'];
        $parameter_string .= '&currency=' .  $data['currency'];
        $parameter_string .= '&amount='   .  $data['amount'];
        $md5key = MD5($k2 . MD5($k1 . $parameter_string) );
        $data['md5key'] = $md5key;
    }
    
    
    $data['billingAddress']     = $billing_address['country'] . " " . 
                                  $billing_address['administrative_area'];
    $data['billingAddress2']    = $billing_address['thoroughfare'] . ' ' . 
                                  $billing_address['premise'];
    $data['billingFirstName']   = $billing_address['first_name'];
    $data['billingLastName']    = $billing_address['last_name'];
    $data['billingPostalCode']  = $billing_address['postal_code'];
    $data['billingPostalPlace'] = $billing_address['locality'];
    $data['email']              = $wrapper->mail->value();
  
    
    $data['realorderid'] = $order->order_number;
    $data['decorator']   = $settings['dibs_flexwin_decorator'];
    $data['accepturl']   = url('commerce/dibs_flexwin/success', array('absolute' => TRUE));
    $data['callbackurl'] = url('commerce/dibs_flexwin/callback', array('absolute' => TRUE));
    $data['s_callbackfix'] = url('commerce/dibs_flexwin/callback', array('absolute' => TRUE));
    $data['cancelurl']     = url('checkout/' . $order->order_id . '/payment/back/' . 
                                 $order->data['payment_redirect_key'], array('absolute' => TRUE)); 
    
    return $data;
}

 function commerce_dibs_flexwin_collect_invoice_params($order) {
        $doc = new DomDocument("1.0","UTF-8");
        $doc->preserveWhiteSpace = true;
        $doc->formatOutput = true;
        $root = $doc->appendChild($doc->createElement("orderInformation"));
        $root->appendChild($doc->createElement("yourRef"))
             ->appendChild($doc->createTextNode($order->order_number));
        $i = 1;
        
        $aItems = commerce_dibs_flexwin_get_order_items($order);
        foreach($aItems as $oItem) {
            $oItem->price = isset($oItem->price) ? commerce_dibs_flexwin_round($oItem->price) : (int)0;
            $oItem->tax = isset($oItem->tax ) ? commerce_dibs_flexwin_round($oItem->tax ) : (int)0;
            if(!empty($oItem->price)) {
                if(!empty($oItem->name)) $oItem->name = commerce_dibs_flexwin_utf8Fix($oItem->name);
                elseif(!empty($oItem->sku)) $oItem->name = commerce_dibs_flexwin_utf8Fix($oItem->sku);
                else $oItem->name = $oItem->id;
                
                $aAttrs = array('itemID' => $oItem->id,
                                'itemDescription' => $oItem->name,
                                'comments' => 'SKU: ' . $oItem->sku,
                                'orderRowNumber' => $i,
                                'quantity' => $oItem->qty,
                                'price' => $oItem->price,
                                'unitCode' => 'pcs',
                                'VATAmount' => $oItem->tax);
                                

                $occ = $root->appendChild($doc->createElement("orderItem"));            
                foreach($aAttrs as $sKey => $sVal) {
                    $occ->appendChild($doc->createAttribute($sKey))
                        ->appendChild($doc->createTextNode($sVal));
                }
                $i++;
            }
        }
        $data = array();
        $data['structuredOrderInformation'] = $doc->saveXML();
        return $data;
    }
    
function commerce_dibs_flexwin_get_order_items($order) {
     $wrapper = entity_metadata_wrapper('commerce_order', $order);
     $aItems = array();
        foreach($wrapper->commerce_line_items as $mItem) {
            if($mItem->type->value() == 'product') {
                $mTmp = $mItem->commerce_total->value();
                if(count($mTmp) > 0) {
                    $mPrice = $mTmp['data']['components'][0]['price']['amount'];
                    if(function_exists('commerce_tax_components')) {
                        $mTax = commerce_tax_components($mTmp['data']['components']);
                        $mVat = isset($mTax[0]['price']['amount']) ? $mTax[0]['price']['amount'] : 0;
                    }
                    else $mVat = 0;
                }
                else { 
                    $mPrice = $mTmp['amount'];
                    $mVat = 0;
                }

                $aItems[] = (object)array(
                    'id'    => $mItem->commerce_product->value()->product_id,
                    'name'  => $mItem->commerce_product->value()->title,
                    'sku'   => $mItem->commerce_product->value()->sku,
                    'price' => commerce_dibs_flexwin_round($mPrice) / (10000 * $mItem->quantity->value()),
                    'qty'   => $mItem->quantity->value(),
                    'tax'   => commerce_dibs_flexwin_round($mVat) / (10000 * $mItem->quantity->value())
                );
            }
        }

      return $aItems;
}

function commerce_dibs_flexwin_process_transaction($order, $payment_method, $transaction_status, $response_type = "callback") {
    $transaction = commerce_payment_transaction_new($payment_method['method_id'], $order->order_id);
    $transaction->instance_id = $payment_method['instance_id'];
    $transaction->amount = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'];
    $transaction->currency_code = $order->commerce_order_total[LANGUAGE_NONE][0]['currency_code'];
    $transaction->status = $transaction_status;
    $transaction->message = 'Dibs transaction: '. $_POST['transact']. '<br> DIBS Orderid: '. $_POST['orderid'];
    $transaction->remote_id = $_POST['transact'];
    $transaction->remote_status = $_POST['statuscode'];
    commerce_payment_transaction_save($transaction);
    if ($transaction_status == COMMERCE_PAYMENT_STATUS_SUCCESS) {
        commerce_checkout_complete($order);
        if( $response_type !=  "callback") {
            drupal_goto('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key']);
        }
    }
    else drupal_goto(url('cart', array('absolute' => TRUE)));
}

function commerce_dibs_flexwin_transaction_already_exists($transactionid) {
    $query = new EntityFieldQuery;
    $result = $query->entityCondition('entity_type', 'commerce_payment_transaction')
                    ->propertyCondition('payment_method', 'dibs_flexwin')
                    ->propertyCondition('remote_id', $transactionid)
                    ->execute();
    if (isset($result['commerce_payment_transaction']) && count($result['commerce_payment_transaction']) > 0) {
        return true;
    }
    return false;
}

function commerce_dibs_flexwin_round($amount, $iPrec = 2) {
     return empty($amount) ? (int)0 : (int)(string)(round($amount, $iPrec) * pow(10, $iPrec));
}

function commerce_dibs_flexwin_utf8Fix($sText) {
        return (mb_detect_encoding($sText) == "UTF-8" && mb_check_encoding($sText, "UTF-8")) ?
               $sText : utf8_encode($sText);
}