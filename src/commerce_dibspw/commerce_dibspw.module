<?php

/**
 * @file
 * Implements Dibspw payment services for use in Drupal Commerce.
 */
require_once dirname(__FILE__) . '/dibs_api/pw/dibs_pw_api.php';

function getDibspwObj() {
    return new dibs_pw_api();
}

/**
 * Implements hook_commerce_payment_method_info().
 *
 * This hook will define the Dibspw payment method
 */
function commerce_dibspw_commerce_payment_method_info() {
    $payment_methods = array();

    $payment_methods['dibspw'] = array(
        'base' => 'commerce_dibspw',
        'title' => t('DIBS Payment Window | Secure Payment Services'),
        'short_title' => t('DIBS Payment Window'),
        'display_title' => t('DIBS Payment Window'),
        'description' => t('Integrates DIBS Payment Window payment provider.'),
        'terminal' => FALSE,
        'offsite' => TRUE,
        'offsite_autoredirect' => TRUE,
    );

    return $payment_methods;
}

/**
 * Implements hook_menu().
 */
function commerce_dibspw_menu() {
    $items = array();

    $items['cart/dibspw/success'] = array(
        'title' => 'Order complete',
        'page callback' => 'commerce_dibspw_success',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'commerce_dibspw.pages.inc',
    );

    $items['cart/dibspw/cancel'] = array(
        'title' => 'Order canceled',
        'page callback' => 'commerce_dibspw_cancel',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'commerce_dibspw.pages.inc',
    );
    
    $items['cart/dibspw/redirect'] = array(
        'title' => 'You will be redirected to DIBS in a few seconds...',
        'page callback' => 'commerce_dibspw_redirect',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'commerce_dibspw.pages.inc',
    );
    
    $items['cart/dibspw/callback'] = array(
        'title' => 'Order complete',
        'page callback' => 'commerce_dibspw_callback',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'commerce_dibspw.pages.inc',
    );
    
    return $items;
}

function commerce_dibspw_settings_form($settings = NULL) {
    $form = array();

    $settings = (array)$settings + array(
        'dibspw_method_title' => "DIBS Payment Window",
        'dibspw_mid'          => "",
	'dibspw_partnerid'    => "",
        'dibspw_method'       => 2,
        'dibspw_hmac'         => "",
        'dibspw_testmode'     => TRUE,
        'dibspw_fee'          => FALSE,
        'dibspw_capturenow'   => FALSE,
        'dibspw_voucher'      => FALSE,
        'dibspw_uniq'         => FALSE,
        'dibspw_paytype'      => "",
        'dibspw_lang'         => "en_UK",
        'dibspw_account'      => "",
        'dibspw_distr'        => "empty",
        'dibspw_status'       => "processing"
    );

    $form['dibspw_method_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#description' => t('Payment method name displayed for customers. Ex: DibsGW'),
        '#default_value' => $settings['dibspw_method_title'],
    );

    $form['dibspw_mid'] = array(
        '#type' => 'textfield',
        '#title' => t('DIBS Merchant ID'),
        '#description' => t('Your DIBS merchant account number.'),
        '#default_value' => $settings['dibspw_mid'],
        '#size' => 16
    );
    
   $form['dibspw_partnerid'] = array(
        '#type' => 'textfield',
        '#title' => t('DIBS Partner Id'),
        '#description' => t('Partner Id.'),
        '#default_value' => $settings['dibspw_partnerid'],
        '#size' => 16
    );

    $form['dibspw_method'] = array(
        '#type' => 'select',
        '#title' => t('DIBS checkout type'),
        '#options' => array(
            '1' => t('Auto'),
            '2' => t('DIBS Payment Window'),
            '3' => t('Mobile Payment Window'),
        ),
        '#default_value' => $settings['dibspw_method'],
    );

    $form['dibspw_hmac'] = array(
        '#type' => 'textfield',
        '#title' => t('HMAC'),
        '#description' => t('Transaction protection.'),
        '#default_value' => $settings['dibspw_hmac']
    );

    $form['dibspw_testmode'] = array(
        '#type' => 'checkbox',
        '#title' => t('Test mode'),
        '#description' => t('Run transactions in test mode.'),
        '#return_value' => 'yes',
        '#default_value' => $settings['dibspw_testmode']
    );

    $form['dibspw_fee'] = array(
        '#type' => 'checkbox',
        '#title' => t('Add fee'),
        '#return_value' => 'yes',
        '#description' => t('Customer pays fee.'),
        '#default_value' => $settings['dibspw_fee'],
    );

    $form['dibspw_capturenow'] = array(
        '#type' => 'checkbox',
        '#title' => t('Capture now'),
        '#description' => t('Function to automatically capture the transaction upon a successful authorization (DIBS PW only).'),
        '#return_value' => 'yes',
        '#default_value' => $settings['dibspw_capturenow']
    );

    $form['dibspw_voucher'] = array(
        '#type' => 'checkbox',
        '#title' => t('Vouchers'),
        '#return_value' => 'yes',
        '#description' => t('Allow to customers use vouchers on checkout (Mobile PW only).'),
        '#default_value' => $settings['dibspw_voucher']
    );

    $form['dibspw_uniq'] = array(
        '#type' => 'checkbox',
        '#title' => t('Unique order ID'),
        '#description' => t('Check if order ID is unique (Mobile PW only).'),
        '#return_value' => 'yes',
        '#default_value' => $settings['dibspw_uniq']
    );

    $form['dibspw_paytype'] = array(
        '#type' => 'textfield',
        '#title' => t('Paytype'),
        '#default_value' => $settings['dibspw_paytype'],
        '#size' => 16,
    );

    $form['dibspw_lang'] = array(
        '#type' => 'select',
        '#title' => t('Language:'),
        '#description' => t('Adjust language for Payment Window.'),
        '#options' => array(
            'da_DK' => t('Danish'),
            'en_UK' => t('English'),
            'fi_FIN' => t('Finnish'),
            'nb_NO' => t('Norwegian'),
            'sv_SE' => t('Swedish'),
        ),
        '#default_value' => $settings['dibspw_lang']
    );

    $form['dibspw_account'] = array(
        '#type' => 'textfield',
        '#title' => t('Account'),
        '#description' => t('Account id used to visually separate transactions in admin.'),
        '#default_value' => $settings['dibspw_account']
    );

    $form['dibspw_distr'] = array(
        '#type' => 'select',
        '#title' => t('Distribution method'),
        '#description' => t('Only relevant for invoice payment types (DIBS PW only).'),
        '#options' => array(
            'empty' => t('-'),
            'paper' => t('Paper'),
            'email' => t('Email'),
        ),
        '#default_value' => $settings['dibspw_distr']
    );

    $form['dibspw_status'] = array(
        '#type' => 'select',
        '#title' => t('Success status'),
        '#description' => t('Order status on transaction success.'),
        '#options' => commerce_dibspw_get_statuses_list(),
        '#default_value' => $settings['dibspw_status']
    );
    
    return $form;
}

/**
 * Payment method callback: redirect form
 *
 * returns form elements that should be submitted to the redirected
 * payment service
 */
function commerce_dibspw_redirect_form($form, &$form_state, $order, $payment_method) {
    if(empty($payment_method['settings']['dibspw_mid'])) {
        drupal_set_message(t('DIBS Payment Window is not configured for use. No Merchant Id has been specified.'), 'error');
        return array();
    }

    return commerce_dibspw_build_redirect_form($form, $form_state, $order, $payment_method['settings']);
}

/**
 * Helper function for the redirect_form callback.
 * Builds an Dibspw payment form from an order object.
 */
function commerce_dibspw_build_redirect_form($form, &$form_state, $order, $settings) {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    $total = commerce_line_items_total($wrapper->commerce_line_items);
    $profile = commerce_customer_profile_load($order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id']);
    $aBillingAddress = entity_metadata_wrapper('commerce_customer_profile', $wrapper->commerce_customer_billing->value());
    $aBillingAddress = $aBillingAddress->commerce_customer_address->value();
    if(isset($wrapper->commerce_customer_shipping)) {
        $aShippingAddress = entity_metadata_wrapper('commerce_customer_profile', $wrapper->commerce_customer_shipping->value());
        $aShippingAddress = $aShippingAddress->commerce_customer_address->value();
    }
    else $aShippingAddress = $aBillingAddress;
    
    $form['#action'] = url('cart/dibspw/redirect', array('absolute' => TRUE));
    $aOrderInfo = array('order' => $order, 'user' => $profile, 'wrapper' => $wrapper, 
                        'shipping' => $aShippingAddress, 'billing' => $aBillingAddress);
    dibs_pw_helpers_cms::cms_dibs_setSettings($settings);
    $aData = getDibspwObj()->api_dibs_get_requestFields($aOrderInfo);
    foreach($aData as $sName => $sVal) $form[$sName] = array('#type' => 'hidden', '#value' => $sVal);

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Proceed with payment'),
    );

    return $form;
}

function commerce_dibspw_process_transaction($order, $payment_method, $transaction_status) {
    $dibsInvoiceFields = array("acquirerLastName",          "acquirerFirstName",
                                       "acquirerDeliveryAddress",   "acquirerDeliveryPostalCode",
                                       "acquirerDeliveryPostalPlace" );
    $dibsInvoiceFieldsString = "";
  
    foreach($_POST as $key=>$value) {
              if(in_array($key, $dibsInvoiceFields)) {
                   $dibsInvoiceFieldsString .= "{$key}={$value}<br>";              
              }
    } 

    $transaction_id = commerce_dibspw_get_payment_transaction();
    $transaction = !$transaction_id ? commerce_payment_transaction_new($payment_method['method_id'], 
                                                                       $order->order_id) :
                                      commerce_payment_transaction_load($transaction_id);
    $transaction->instance_id = $payment_method['instance_id'];
    $transaction->amount = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'];
    $transaction->currency_code = $order->commerce_order_total[LANGUAGE_NONE][0]['currency_code'];
    $transaction->status = $transaction_status;
    $transaction->message = 'Status: @status<br>' . $dibsInvoiceFieldsString;
    $transaction->message_variables = array('@status' => $_POST['status']);
    $transaction->remote_id = $_POST['transaction'];
    $transaction->remote_status = $_POST['status'];
    commerce_payment_transaction_save($transaction);
    if ($transaction_status == COMMERCE_PAYMENT_STATUS_SUCCESS) {
        commerce_order_status_update($order, getDibspwObj()->helper_dibs_tools_conf("status"));
        drupal_goto('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key']);
    }
    else drupal_goto(url('cart', array('absolute' => TRUE)));
}

function commerce_dibspw_get_payment_transaction() {
    $query = new EntityFieldQuery;
    $result = $query->entityCondition('entity_type', 'commerce_payment_transaction')
                    ->propertyCondition('payment_method', 'dibspw')
                    ->propertyCondition('remote_id', $_POST['transaction'])
                    ->execute();
    if (isset($result['commerce_payment_transaction']) && count($result['commerce_payment_transaction']) > 0) {
        $transaction = array_pop($result['commerce_payment_transaction']);
        return $transaction->transaction_id;
    }
    
    return FALSE;
}

function commerce_dibspw_get_statuses_list() {
    $options = array();
    foreach (commerce_order_state_get_title() as $name => $title) {
        foreach (commerce_order_statuses(array('state' => $name)) as $order_status) {
            $options[check_plain($title)][$order_status['name']] = check_plain($order_status['title']);
        }
    }
    
    return $options;
}